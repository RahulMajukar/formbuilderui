// File: /src/utils/pdfGenerator.js
import jsPDF from 'jspdf';

export const generatePDF = (formData) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  let yPosition = margin;

  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(formData.title, margin, yPosition);
  yPosition += 15;

  // Description
  if (formData.description) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    const descriptionLines = doc.splitTextToSize(formData.description, pageWidth - 2 * margin);
    doc.text(descriptionLines, margin, yPosition);
    yPosition += (descriptionLines.length * 5) + 10;
  }

  // Add a line separator
  doc.setDrawColor(200, 200, 200);
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 15;

  // Form fields
  formData.fields?.forEach((field, index) => {
    // Check if we need a new page
    if (yPosition > pageHeight - 50) {
      doc.addPage();
      yPosition = margin;
    }

    switch (field.type) {
      case 'section':
        // Section break
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text(field.label || 'Section Break', margin, yPosition);
        yPosition += 10;
        doc.setDrawColor(150, 150, 150);
        doc.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 15;
        break;

      case 'page':
        // Page break
        doc.addPage();
        yPosition = margin;
        break;

      default:
        // Regular field
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        
        // Field label
        let labelText = field.label;
        if (field.required) {
          labelText += ' *';
        }
        doc.text(labelText, margin, yPosition);
        yPosition += 7;

        // Help text
        if (field.helpText) {
          doc.setFontSize(10);
          doc.setFont('helvetica', 'italic');
          doc.setTextColor(100, 100, 100);
          const helpLines = doc.splitTextToSize(field.helpText, pageWidth - 2 * margin);
          doc.text(helpLines, margin, yPosition);
          yPosition += (helpLines.length * 4) + 3;
          doc.setTextColor(0, 0, 0);
        }

        // Field input area
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(10);
        
        if (field.type === 'textarea') {
          // Multi-line input box
          doc.setDrawColor(180, 180, 180);
          doc.rect(margin, yPosition, pageWidth - 2 * margin, 30);
          if (field.placeholder) {
            doc.setTextColor(150, 150, 150);
            doc.text(field.placeholder, margin + 3, yPosition + 8);
            doc.setTextColor(0, 0, 0);
          }
          yPosition += 35;
        } else if (field.type === 'radio' || field.type === 'checkbox') {
          // Options
          field.options?.forEach((option, optIndex) => {
            const symbol = field.type === 'radio' ? '○' : '☐';
            doc.text(`${symbol} ${option}`, margin + 5, yPosition);
            yPosition += 8;
          });
          yPosition += 5;
        } else if (field.type === 'dropdown') {
          // Dropdown
          doc.setDrawColor(180, 180, 180);
          doc.rect(margin, yPosition, pageWidth - 2 * margin, 8);
          doc.text('Select an option ▼', margin + 3, yPosition + 5);
          yPosition += 13;
        } else if (field.type === 'file') {
          // File upload area
          doc.setDrawColor(180, 180, 180);
          doc.setFillColor(250, 250, 250);
          doc.rect(margin, yPosition, pageWidth - 2 * margin, 20, 'FD');
          doc.setTextColor(100, 100, 100);
          doc.text('Click to upload or drag and drop', margin + 3, yPosition + 8);
          doc.text('File upload area', margin + 3, yPosition + 15);
          doc.setTextColor(0, 0, 0);
          yPosition += 25;
        } else {
          // Single-line input
          doc.setDrawColor(180, 180, 180);
          doc.rect(margin, yPosition, pageWidth - 2 * margin, 8);
          if (field.placeholder) {
            doc.setTextColor(150, 150, 150);
            doc.text(field.placeholder, margin + 3, yPosition + 5);
            doc.setTextColor(0, 0, 0);
          }
          yPosition += 13;
        }

        yPosition += 10; // Space between fields
        break;
    }
  });

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Generated by FormBuilder - Page ${i} of ${pageCount}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
  }

  // Save the PDF
  const fileName = `${formData.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_form.pdf`;
  doc.save(fileName);
};

export default generatePDF;